//
//  Copyright (c) 2003 Launchbird Design Systems, Inc.
//  All rights reserved.
//  
//  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
//    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
//    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
//  
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
//  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
//  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
//  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
//  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
//  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//  
//  
//  Overview:
//  
//    Cordics (COordinate Rotation DIgital Computers) are used to calculate
//    trigonometric functions and complex plane phase rotations.
//    This vector mode cordic rotates any complex vector to the positive real axis.
//    The resulting angle is the initial angle plus the angle of rotation.
//  
//  Interface:
//  
//    Synchronization:
//      clock_c  : Clock input.
//      enable_i : Synchronous enable.
//      reset_i  : Synchronous reset.
//  
//    Inputs:
//      real_i   : Initial real component (signed).
//      imag_i   : Initial imaginary component (signed).
//      angle_i  : Initial angle (modulo 2PI).
//  
//    Outputs:
//      real_o   : Resulting real component (signed).
//      imag_o   : Resulting imaginary component (signed).
//      angle_o  : Resulting angle (modulo 2PI).
//  
//  Built In Parameters:
//  
//    Cordic Mode    = Vector
//    Vector Width   = 18
//    Angle Width    = 18
//    Cordic Stages  = 18
//  
//  Resulting Pipeline Latency is 20 clock cycles.
//  
//  
//  
//  Generated by Confluence 0.6.3  --  Launchbird Design Systems, Inc.  --  www.launchbird.com
//  
//  Build Date : Fri Aug 22 09:44:28 CDT 2003
//  
//  Interface
//  
//    Build Name    : cf_cordic_v_18_18_18
//    Clock Domains : clock_c  
//    Vector Input  : enable_i(1)
//    Vector Input  : reset_i(1)
//    Vector Input  : real_i(18)
//    Vector Input  : imag_i(18)
//    Vector Input  : ang_i(18)
//    Vector Output : real_o(18)
//    Vector Output : imag_o(18)
//    Vector Output : ang_o(18)
//  
//  
//  

`timescale 1 ns / 1 ns

module cf_cordic_v_18_18_18 (clock_c, enable_i, reset_i, real_i, imag_i, ang_i, real_o, imag_o, ang_o);
input  clock_c;
input  enable_i;
input  reset_i;
input  [17:0] real_i;
input  [17:0] imag_i;
input  [17:0] ang_i;
output [17:0] real_o;
output [17:0] imag_o;
output [17:0] ang_o;
wire   [17:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
cf_cordic_v_18_18_18_1 s1 (clock_c, enable_i, reset_i, real_i, imag_i, ang_i, n1, n2, n3);
assign real_o = n1;
assign imag_o = n2;
assign ang_o = n3;
endmodule

module cf_cordic_v_18_18_18_1 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
reg    [17:0] n1;
reg    [17:0] n2;
reg    [17:0] n3;
wire   [17:0] s4_1;
wire   [17:0] s4_2;
wire   [17:0] s4_3;
wire   [17:0] s5_1;
wire   [17:0] s5_2;
wire   [17:0] s5_3;
wire   [17:0] s6_1;
wire   [17:0] s6_2;
wire   [17:0] s6_3;
wire   [17:0] s7_1;
wire   [17:0] s7_2;
wire   [17:0] s7_3;
wire   [17:0] s8_1;
wire   [17:0] s8_2;
wire   [17:0] s8_3;
wire   s9_1;
initial n1 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n1 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n1 <= i3;
initial n2 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n2 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n2 <= i4;
initial n3 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n3 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n3 <= i5;
cf_cordic_v_18_18_18_31 s4 (clock_c, i1, i2, s6_1, s6_2, s6_3, s4_1, s4_2, s4_3);
cf_cordic_v_18_18_18_6 s5 (clock_c, i1, i2, s4_1, s4_2, s4_3, s5_1, s5_2, s5_3);
cf_cordic_v_18_18_18_5 s6 (clock_c, i1, i2, s7_1, s7_2, s7_3, s6_1, s6_2, s6_3);
cf_cordic_v_18_18_18_4 s7 (clock_c, i1, i2, s8_1, s8_2, s8_3, s7_1, s7_2, s7_3);
cf_cordic_v_18_18_18_3 s8 (clock_c, i1, i2, n1, n2, n3, s9_1, s8_1, s8_2, s8_3);
cf_cordic_v_18_18_18_2 s9 (n1, s9_1);
assign o3 = s5_3;
assign o2 = s5_2;
assign o1 = s5_1;
endmodule

module cf_cordic_v_18_18_18_2 (i1, o1);
input  [17:0] i1;
output o1;
wire   n1;
wire   n2;
wire   [16:0] n3;
wire   [17:0] n4;
wire   n5;
wire   [18:0] n6;
wire   [18:0] n7;
wire   n8;
wire   [18:0] n9;
assign n1 = i1[17];
assign n2 = ~n1;
assign n3 = {i1[16],
  i1[15],
  i1[14],
  i1[13],
  i1[12],
  i1[11],
  i1[10],
  i1[9],
  i1[8],
  i1[7],
  i1[6],
  i1[5],
  i1[4],
  i1[3],
  i1[2],
  i1[1],
  i1[0]};
assign n4 = {n2, n3};
assign n5 = 1'b0;
assign n6 = {n5, n4};
assign n7 = n6 - n9;
assign n8 = n7[18];
assign n9 = 19'b0100000000000000000;
assign o1 = n8;
endmodule

module cf_cordic_v_18_18_18_3 (clock_c, i1, i2, i3, i4, i5, i6, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
input  i6;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   [17:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
wire   [17:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
wire   [17:0] n8;
reg    [17:0] n9;
wire   [17:0] n10;
reg    [17:0] n11;
wire   [17:0] n12;
assign n1 = 18'b000000000000000000;
assign n2 = n1 - i3;
assign n3 = 18'b000000000000000000;
assign n4 = n3 - i4;
assign n5 = i5 - n12;
assign n6 = i6 ? n2 : i3;
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n7 <= n6;
assign n8 = i6 ? n4 : i4;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign n10 = i6 ? n5 : i5;
initial n11 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n11 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n11 <= n10;
assign n12 = 18'b100000000000000000;
assign o3 = n11;
assign o2 = n9;
assign o1 = n7;
endmodule

module cf_cordic_v_18_18_18_4 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   [17:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
wire   [17:0] n4;
reg    [17:0] n5;
wire   n6;
wire   [17:0] n7;
wire   [17:0] n8;
wire   [17:0] n9;
wire   [17:0] n10;
reg    [17:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [17:0] n14;
wire   [17:0] n15;
reg    [17:0] n16;
wire   s17_1;
assign n1 = {i4[17],
  i4[16],
  i4[15],
  i4[14],
  i4[13],
  i4[12],
  i4[11],
  i4[10],
  i4[9],
  i4[8],
  i4[7],
  i4[6],
  i4[5],
  i4[4],
  i4[3],
  i4[2],
  i4[1],
  i4[0]};
assign n2 = i3 + n1;
assign n3 = i3 - n1;
assign n4 = s17_1 ? n2 : n3;
initial n5 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n5 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n5 <= n4;
assign n6 = ~s17_1;
assign n7 = {i3[17],
  i3[16],
  i3[15],
  i3[14],
  i3[13],
  i3[12],
  i3[11],
  i3[10],
  i3[9],
  i3[8],
  i3[7],
  i3[6],
  i3[5],
  i3[4],
  i3[3],
  i3[2],
  i3[1],
  i3[0]};
assign n8 = i4 + n7;
assign n9 = i4 - n7;
assign n10 = n6 ? n8 : n9;
initial n11 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n11 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n11 <= n10;
assign n12 = 18'b001000000000000000;
assign n13 = i5 + n12;
assign n14 = i5 - n12;
assign n15 = s17_1 ? n13 : n14;
initial n16 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n16 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n16 <= n15;
cf_cordic_v_18_18_18_32 s17 (i4, s17_1);
assign o3 = n16;
assign o2 = n11;
assign o1 = n5;
endmodule

module cf_cordic_v_18_18_18_5 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   n1;
wire   [16:0] n2;
wire   [17:0] n3;
wire   [17:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
wire   n8;
wire   n9;
wire   [16:0] n10;
wire   [17:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [17:0] n14;
reg    [17:0] n15;
wire   [17:0] n16;
wire   [17:0] n17;
wire   [17:0] n18;
wire   [17:0] n19;
reg    [17:0] n20;
wire   s21_1;
assign n1 = i4[17];
assign n2 = {i4[17],
  i4[16],
  i4[15],
  i4[14],
  i4[13],
  i4[12],
  i4[11],
  i4[10],
  i4[9],
  i4[8],
  i4[7],
  i4[6],
  i4[5],
  i4[4],
  i4[3],
  i4[2],
  i4[1]};
assign n3 = {n1, n2};
assign n4 = i3 + n3;
assign n5 = i3 - n3;
assign n6 = s21_1 ? n4 : n5;
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n7 <= n6;
assign n8 = ~s21_1;
assign n9 = i3[17];
assign n10 = {i3[17],
  i3[16],
  i3[15],
  i3[14],
  i3[13],
  i3[12],
  i3[11],
  i3[10],
  i3[9],
  i3[8],
  i3[7],
  i3[6],
  i3[5],
  i3[4],
  i3[3],
  i3[2],
  i3[1]};
assign n11 = {n9, n10};
assign n12 = i4 + n11;
assign n13 = i4 - n11;
assign n14 = n8 ? n12 : n13;
initial n15 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n15 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n15 <= n14;
assign n16 = 18'b000100101110010000;
assign n17 = i5 + n16;
assign n18 = i5 - n16;
assign n19 = s21_1 ? n17 : n18;
initial n20 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n20 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n20 <= n19;
cf_cordic_v_18_18_18_32 s21 (i4, s21_1);
assign o3 = n20;
assign o2 = n15;
assign o1 = n7;
endmodule

module cf_cordic_v_18_18_18_6 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   [17:0] s1_1;
wire   [17:0] s1_2;
wire   [17:0] s1_3;
wire   [17:0] s2_1;
wire   [17:0] s2_2;
wire   [17:0] s2_3;
wire   [17:0] s3_1;
wire   [17:0] s3_2;
wire   [17:0] s3_3;
wire   [17:0] s4_1;
wire   [17:0] s4_2;
wire   [17:0] s4_3;
wire   [17:0] s5_1;
wire   [17:0] s5_2;
wire   [17:0] s5_3;
wire   [17:0] s6_1;
wire   [17:0] s6_2;
wire   [17:0] s6_3;
wire   [17:0] s7_1;
wire   [17:0] s7_2;
wire   [17:0] s7_3;
wire   [17:0] s8_1;
wire   [17:0] s8_2;
wire   [17:0] s8_3;
cf_cordic_v_18_18_18_29 s1 (clock_c, i1, i2, s3_1, s3_2, s3_3, s1_1, s1_2, s1_3);
cf_cordic_v_18_18_18_16 s2 (clock_c, i1, i2, s1_1, s1_2, s1_3, s2_1, s2_2, s2_3);
cf_cordic_v_18_18_18_14 s3 (clock_c, i1, i2, s4_1, s4_2, s4_3, s3_1, s3_2, s3_3);
cf_cordic_v_18_18_18_12 s4 (clock_c, i1, i2, s5_1, s5_2, s5_3, s4_1, s4_2, s4_3);
cf_cordic_v_18_18_18_10 s5 (clock_c, i1, i2, s6_1, s6_2, s6_3, s5_1, s5_2, s5_3);
cf_cordic_v_18_18_18_9 s6 (clock_c, i1, i2, s7_1, s7_2, s7_3, s6_1, s6_2, s6_3);
cf_cordic_v_18_18_18_8 s7 (clock_c, i1, i2, s8_1, s8_2, s8_3, s7_1, s7_2, s7_3);
cf_cordic_v_18_18_18_7 s8 (clock_c, i1, i2, i3, i4, i5, s8_1, s8_2, s8_3);
assign o3 = s2_3;
assign o2 = s2_2;
assign o1 = s2_1;
endmodule

module cf_cordic_v_18_18_18_7 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   n1;
wire   [1:0] n2;
wire   [2:0] n3;
wire   [14:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
reg    [17:0] n9;
wire   n10;
wire   n11;
wire   [1:0] n12;
wire   [2:0] n13;
wire   [14:0] n14;
wire   [17:0] n15;
wire   [17:0] n16;
wire   [17:0] n17;
wire   [17:0] n18;
reg    [17:0] n19;
wire   [17:0] n20;
wire   [17:0] n21;
wire   [17:0] n22;
wire   [17:0] n23;
reg    [17:0] n24;
wire   s25_1;
assign n1 = i4[17];
assign n2 = {n1, n1};
assign n3 = {n1, n2};
assign n4 = {i4[17],
  i4[16],
  i4[15],
  i4[14],
  i4[13],
  i4[12],
  i4[11],
  i4[10],
  i4[9],
  i4[8],
  i4[7],
  i4[6],
  i4[5],
  i4[4],
  i4[3]};
assign n5 = {n3, n4};
assign n6 = i3 + n5;
assign n7 = i3 - n5;
assign n8 = s25_1 ? n6 : n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign n10 = ~s25_1;
assign n11 = i3[17];
assign n12 = {n11, n11};
assign n13 = {n11, n12};
assign n14 = {i3[17],
  i3[16],
  i3[15],
  i3[14],
  i3[13],
  i3[12],
  i3[11],
  i3[10],
  i3[9],
  i3[8],
  i3[7],
  i3[6],
  i3[5],
  i3[4],
  i3[3]};
assign n15 = {n13, n14};
assign n16 = i4 + n15;
assign n17 = i4 - n15;
assign n18 = n10 ? n16 : n17;
initial n19 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n19 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n19 <= n18;
assign n20 = 18'b000001010001000100;
assign n21 = i5 + n20;
assign n22 = i5 - n20;
assign n23 = s25_1 ? n21 : n22;
initial n24 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n24 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n24 <= n23;
cf_cordic_v_18_18_18_32 s25 (i4, s25_1);
assign o3 = n24;
assign o2 = n19;
assign o1 = n9;
endmodule

module cf_cordic_v_18_18_18_8 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   n1;
wire   [1:0] n2;
wire   [2:0] n3;
wire   [3:0] n4;
wire   [13:0] n5;
wire   [17:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
wire   [17:0] n9;
reg    [17:0] n10;
wire   n11;
wire   n12;
wire   [1:0] n13;
wire   [2:0] n14;
wire   [3:0] n15;
wire   [13:0] n16;
wire   [17:0] n17;
wire   [17:0] n18;
wire   [17:0] n19;
wire   [17:0] n20;
reg    [17:0] n21;
wire   [17:0] n22;
wire   [17:0] n23;
wire   [17:0] n24;
wire   [17:0] n25;
reg    [17:0] n26;
wire   s27_1;
assign n1 = i4[17];
assign n2 = {n1, n1};
assign n3 = {n1, n2};
assign n4 = {n1, n3};
assign n5 = {i4[17],
  i4[16],
  i4[15],
  i4[14],
  i4[13],
  i4[12],
  i4[11],
  i4[10],
  i4[9],
  i4[8],
  i4[7],
  i4[6],
  i4[5],
  i4[4]};
assign n6 = {n4, n5};
assign n7 = i3 + n6;
assign n8 = i3 - n6;
assign n9 = s27_1 ? n7 : n8;
initial n10 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n10 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n10 <= n9;
assign n11 = ~s27_1;
assign n12 = i3[17];
assign n13 = {n12, n12};
assign n14 = {n12, n13};
assign n15 = {n12, n14};
assign n16 = {i3[17],
  i3[16],
  i3[15],
  i3[14],
  i3[13],
  i3[12],
  i3[11],
  i3[10],
  i3[9],
  i3[8],
  i3[7],
  i3[6],
  i3[5],
  i3[4]};
assign n17 = {n15, n16};
assign n18 = i4 + n17;
assign n19 = i4 - n17;
assign n20 = n11 ? n18 : n19;
initial n21 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n21 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n21 <= n20;
assign n22 = 18'b000000101000101100;
assign n23 = i5 + n22;
assign n24 = i5 - n22;
assign n25 = s27_1 ? n23 : n24;
initial n26 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n26 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n26 <= n25;
cf_cordic_v_18_18_18_32 s27 (i4, s27_1);
assign o3 = n26;
assign o2 = n21;
assign o1 = n10;
endmodule

module cf_cordic_v_18_18_18_9 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   n1;
wire   [1:0] n2;
wire   [2:0] n3;
wire   [3:0] n4;
wire   [4:0] n5;
wire   [12:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
wire   [17:0] n9;
wire   [17:0] n10;
reg    [17:0] n11;
wire   n12;
wire   n13;
wire   [1:0] n14;
wire   [2:0] n15;
wire   [3:0] n16;
wire   [4:0] n17;
wire   [12:0] n18;
wire   [17:0] n19;
wire   [17:0] n20;
wire   [17:0] n21;
wire   [17:0] n22;
reg    [17:0] n23;
wire   [17:0] n24;
wire   [17:0] n25;
wire   [17:0] n26;
wire   [17:0] n27;
reg    [17:0] n28;
wire   s29_1;
assign n1 = i4[17];
assign n2 = {n1, n1};
assign n3 = {n1, n2};
assign n4 = {n1, n3};
assign n5 = {n1, n4};
assign n6 = {i4[17],
  i4[16],
  i4[15],
  i4[14],
  i4[13],
  i4[12],
  i4[11],
  i4[10],
  i4[9],
  i4[8],
  i4[7],
  i4[6],
  i4[5]};
assign n7 = {n5, n6};
assign n8 = i3 + n7;
assign n9 = i3 - n7;
assign n10 = s29_1 ? n8 : n9;
initial n11 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n11 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n11 <= n10;
assign n12 = ~s29_1;
assign n13 = i3[17];
assign n14 = {n13, n13};
assign n15 = {n13, n14};
assign n16 = {n13, n15};
assign n17 = {n13, n16};
assign n18 = {i3[17],
  i3[16],
  i3[15],
  i3[14],
  i3[13],
  i3[12],
  i3[11],
  i3[10],
  i3[9],
  i3[8],
  i3[7],
  i3[6],
  i3[5]};
assign n19 = {n17, n18};
assign n20 = i4 + n19;
assign n21 = i4 - n19;
assign n22 = n12 ? n20 : n21;
initial n23 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n23 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n23 <= n22;
assign n24 = 18'b000000010100010111;
assign n25 = i5 + n24;
assign n26 = i5 - n24;
assign n27 = s29_1 ? n25 : n26;
initial n28 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n28 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n28 <= n27;
cf_cordic_v_18_18_18_32 s29 (i4, s29_1);
assign o3 = n28;
assign o2 = n23;
assign o1 = n11;
endmodule

module cf_cordic_v_18_18_18_10 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   [17:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [17:0] n4;
wire   n5;
wire   [17:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
reg    [17:0] n9;
wire   [17:0] n10;
wire   [17:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
reg    [17:0] n14;
wire   [17:0] s15_1;
wire   [17:0] s16_1;
wire   s17_1;
assign n1 = i3 + s16_1;
assign n2 = i3 - s16_1;
assign n3 = s17_1 ? n1 : n2;
initial n4 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = ~s17_1;
assign n6 = i4 + s15_1;
assign n7 = i4 - s15_1;
assign n8 = n5 ? n6 : n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign n10 = 18'b000000001010001100;
assign n11 = i5 + n10;
assign n12 = i5 - n10;
assign n13 = s17_1 ? n11 : n12;
initial n14 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n14 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n14 <= n13;
cf_cordic_v_18_18_18_11 s15 (i3, s15_1);
cf_cordic_v_18_18_18_11 s16 (i4, s16_1);
cf_cordic_v_18_18_18_32 s17 (i4, s17_1);
assign o3 = n14;
assign o2 = n9;
assign o1 = n4;
endmodule

module cf_cordic_v_18_18_18_11 (i1, o1);
input  [17:0] i1;
output [17:0] o1;
wire   n1;
wire   [1:0] n2;
wire   [2:0] n3;
wire   [3:0] n4;
wire   [4:0] n5;
wire   [5:0] n6;
wire   [11:0] n7;
wire   [17:0] n8;
assign n1 = i1[17];
assign n2 = {n1, n1};
assign n3 = {n1, n2};
assign n4 = {n1, n3};
assign n5 = {n1, n4};
assign n6 = {n1, n5};
assign n7 = {i1[17],
  i1[16],
  i1[15],
  i1[14],
  i1[13],
  i1[12],
  i1[11],
  i1[10],
  i1[9],
  i1[8],
  i1[7],
  i1[6]};
assign n8 = {n6, n7};
assign o1 = n8;
endmodule

module cf_cordic_v_18_18_18_12 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   [17:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [17:0] n4;
wire   n5;
wire   [17:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
reg    [17:0] n9;
wire   [17:0] n10;
wire   [17:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
reg    [17:0] n14;
wire   [17:0] s15_1;
wire   [17:0] s16_1;
wire   s17_1;
assign n1 = i3 + s16_1;
assign n2 = i3 - s16_1;
assign n3 = s17_1 ? n1 : n2;
initial n4 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = ~s17_1;
assign n6 = i4 + s15_1;
assign n7 = i4 - s15_1;
assign n8 = n5 ? n6 : n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign n10 = 18'b000000000101000110;
assign n11 = i5 + n10;
assign n12 = i5 - n10;
assign n13 = s17_1 ? n11 : n12;
initial n14 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n14 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n14 <= n13;
cf_cordic_v_18_18_18_13 s15 (i3, s15_1);
cf_cordic_v_18_18_18_13 s16 (i4, s16_1);
cf_cordic_v_18_18_18_32 s17 (i4, s17_1);
assign o3 = n14;
assign o2 = n9;
assign o1 = n4;
endmodule

module cf_cordic_v_18_18_18_13 (i1, o1);
input  [17:0] i1;
output [17:0] o1;
wire   n1;
wire   [1:0] n2;
wire   [2:0] n3;
wire   [3:0] n4;
wire   [4:0] n5;
wire   [5:0] n6;
wire   [6:0] n7;
wire   [10:0] n8;
wire   [17:0] n9;
assign n1 = i1[17];
assign n2 = {n1, n1};
assign n3 = {n1, n2};
assign n4 = {n1, n3};
assign n5 = {n1, n4};
assign n6 = {n1, n5};
assign n7 = {n1, n6};
assign n8 = {i1[17],
  i1[16],
  i1[15],
  i1[14],
  i1[13],
  i1[12],
  i1[11],
  i1[10],
  i1[9],
  i1[8],
  i1[7]};
assign n9 = {n7, n8};
assign o1 = n9;
endmodule

module cf_cordic_v_18_18_18_14 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   [17:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [17:0] n4;
wire   n5;
wire   [17:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
reg    [17:0] n9;
wire   [17:0] n10;
wire   [17:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
reg    [17:0] n14;
wire   [17:0] s15_1;
wire   [17:0] s16_1;
wire   s17_1;
assign n1 = i3 + s16_1;
assign n2 = i3 - s16_1;
assign n3 = s17_1 ? n1 : n2;
initial n4 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = ~s17_1;
assign n6 = i4 + s15_1;
assign n7 = i4 - s15_1;
assign n8 = n5 ? n6 : n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign n10 = 18'b000000000010100011;
assign n11 = i5 + n10;
assign n12 = i5 - n10;
assign n13 = s17_1 ? n11 : n12;
initial n14 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n14 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n14 <= n13;
cf_cordic_v_18_18_18_15 s15 (i3, s15_1);
cf_cordic_v_18_18_18_15 s16 (i4, s16_1);
cf_cordic_v_18_18_18_32 s17 (i4, s17_1);
assign o3 = n14;
assign o2 = n9;
assign o1 = n4;
endmodule

module cf_cordic_v_18_18_18_15 (i1, o1);
input  [17:0] i1;
output [17:0] o1;
wire   n1;
wire   [1:0] n2;
wire   [2:0] n3;
wire   [3:0] n4;
wire   [4:0] n5;
wire   [5:0] n6;
wire   [6:0] n7;
wire   [7:0] n8;
wire   [9:0] n9;
wire   [17:0] n10;
assign n1 = i1[17];
assign n2 = {n1, n1};
assign n3 = {n1, n2};
assign n4 = {n1, n3};
assign n5 = {n1, n4};
assign n6 = {n1, n5};
assign n7 = {n1, n6};
assign n8 = {n1, n7};
assign n9 = {i1[17],
  i1[16],
  i1[15],
  i1[14],
  i1[13],
  i1[12],
  i1[11],
  i1[10],
  i1[9],
  i1[8]};
assign n10 = {n8, n9};
assign o1 = n10;
endmodule

module cf_cordic_v_18_18_18_16 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   [17:0] s1_1;
wire   [17:0] s1_2;
wire   [17:0] s1_3;
wire   [17:0] s2_1;
wire   [17:0] s2_2;
wire   [17:0] s2_3;
wire   [17:0] s3_1;
wire   [17:0] s3_2;
wire   [17:0] s3_3;
wire   [17:0] s4_1;
wire   [17:0] s4_2;
wire   [17:0] s4_3;
wire   [17:0] s5_1;
wire   [17:0] s5_2;
wire   [17:0] s5_3;
wire   [17:0] s6_1;
wire   [17:0] s6_2;
wire   [17:0] s6_3;
wire   [17:0] s7_1;
wire   [17:0] s7_2;
wire   [17:0] s7_3;
wire   [17:0] s8_1;
wire   [17:0] s8_2;
wire   [17:0] s8_3;
cf_cordic_v_18_18_18_27 s1 (clock_c, i1, i2, s2_1, s2_2, s2_3, s1_1, s1_2, s1_3);
cf_cordic_v_18_18_18_26 s2 (clock_c, i1, i2, s3_1, s3_2, s3_3, s2_1, s2_2, s2_3);
cf_cordic_v_18_18_18_24 s3 (clock_c, i1, i2, s4_1, s4_2, s4_3, s3_1, s3_2, s3_3);
cf_cordic_v_18_18_18_22 s4 (clock_c, i1, i2, s5_1, s5_2, s5_3, s4_1, s4_2, s4_3);
cf_cordic_v_18_18_18_20 s5 (clock_c, i1, i2, s6_1, s6_2, s6_3, s5_1, s5_2, s5_3);
cf_cordic_v_18_18_18_19 s6 (clock_c, i1, i2, s7_1, s7_2, s7_3, s6_1, s6_2, s6_3);
cf_cordic_v_18_18_18_18 s7 (clock_c, i1, i2, s8_1, s8_2, s8_3, s7_1, s7_2, s7_3);
cf_cordic_v_18_18_18_17 s8 (clock_c, i1, i2, i3, i4, i5, s8_1, s8_2, s8_3);
assign o3 = s1_3;
assign o2 = s1_2;
assign o1 = s1_1;
endmodule

module cf_cordic_v_18_18_18_17 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   n1;
wire   [9:0] n2;
wire   [7:0] n3;
wire   [17:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
wire   [17:0] n7;
reg    [17:0] n8;
wire   n9;
wire   n10;
wire   [9:0] n11;
wire   [7:0] n12;
wire   [17:0] n13;
wire   [17:0] n14;
wire   [17:0] n15;
wire   [17:0] n16;
reg    [17:0] n17;
wire   [17:0] n18;
wire   [17:0] n19;
wire   [17:0] n20;
wire   [17:0] n21;
reg    [17:0] n22;
wire   [8:0] s23_1;
wire   [8:0] s24_1;
wire   s25_1;
assign n1 = i4[17];
assign n2 = {n1, s23_1};
assign n3 = {i4[17],
  i4[16],
  i4[15],
  i4[14],
  i4[13],
  i4[12],
  i4[11],
  i4[10]};
assign n4 = {n2, n3};
assign n5 = i3 + n4;
assign n6 = i3 - n4;
assign n7 = s25_1 ? n5 : n6;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
assign n9 = ~s25_1;
assign n10 = i3[17];
assign n11 = {n10, s24_1};
assign n12 = {i3[17],
  i3[16],
  i3[15],
  i3[14],
  i3[13],
  i3[12],
  i3[11],
  i3[10]};
assign n13 = {n11, n12};
assign n14 = i4 + n13;
assign n15 = i4 - n13;
assign n16 = n9 ? n14 : n15;
initial n17 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n17 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n17 <= n16;
assign n18 = 18'b000000000000101001;
assign n19 = i5 + n18;
assign n20 = i5 - n18;
assign n21 = s25_1 ? n19 : n20;
initial n22 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n22 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n22 <= n21;
cf_cordic_v_18_18_18_30 s23 (n1, s23_1);
cf_cordic_v_18_18_18_30 s24 (n10, s24_1);
cf_cordic_v_18_18_18_32 s25 (i4, s25_1);
assign o3 = n22;
assign o2 = n17;
assign o1 = n8;
endmodule

module cf_cordic_v_18_18_18_18 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   n1;
wire   [9:0] n2;
wire   [10:0] n3;
wire   [6:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
reg    [17:0] n9;
wire   n10;
wire   n11;
wire   [9:0] n12;
wire   [10:0] n13;
wire   [6:0] n14;
wire   [17:0] n15;
wire   [17:0] n16;
wire   [17:0] n17;
wire   [17:0] n18;
reg    [17:0] n19;
wire   [17:0] n20;
wire   [17:0] n21;
wire   [17:0] n22;
wire   [17:0] n23;
reg    [17:0] n24;
wire   [8:0] s25_1;
wire   [8:0] s26_1;
wire   s27_1;
assign n1 = i4[17];
assign n2 = {n1, s25_1};
assign n3 = {n1, n2};
assign n4 = {i4[17],
  i4[16],
  i4[15],
  i4[14],
  i4[13],
  i4[12],
  i4[11]};
assign n5 = {n3, n4};
assign n6 = i3 + n5;
assign n7 = i3 - n5;
assign n8 = s27_1 ? n6 : n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign n10 = ~s27_1;
assign n11 = i3[17];
assign n12 = {n11, s26_1};
assign n13 = {n11, n12};
assign n14 = {i3[17],
  i3[16],
  i3[15],
  i3[14],
  i3[13],
  i3[12],
  i3[11]};
assign n15 = {n13, n14};
assign n16 = i4 + n15;
assign n17 = i4 - n15;
assign n18 = n10 ? n16 : n17;
initial n19 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n19 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n19 <= n18;
assign n20 = 18'b000000000000010100;
assign n21 = i5 + n20;
assign n22 = i5 - n20;
assign n23 = s27_1 ? n21 : n22;
initial n24 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n24 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n24 <= n23;
cf_cordic_v_18_18_18_30 s25 (n1, s25_1);
cf_cordic_v_18_18_18_30 s26 (n11, s26_1);
cf_cordic_v_18_18_18_32 s27 (i4, s27_1);
assign o3 = n24;
assign o2 = n19;
assign o1 = n9;
endmodule

module cf_cordic_v_18_18_18_19 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   n1;
wire   [9:0] n2;
wire   [10:0] n3;
wire   [11:0] n4;
wire   [5:0] n5;
wire   [17:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
wire   [17:0] n9;
reg    [17:0] n10;
wire   n11;
wire   n12;
wire   [9:0] n13;
wire   [10:0] n14;
wire   [11:0] n15;
wire   [5:0] n16;
wire   [17:0] n17;
wire   [17:0] n18;
wire   [17:0] n19;
wire   [17:0] n20;
reg    [17:0] n21;
wire   [17:0] n22;
wire   [17:0] n23;
wire   [17:0] n24;
wire   [17:0] n25;
reg    [17:0] n26;
wire   [8:0] s27_1;
wire   [8:0] s28_1;
wire   s29_1;
assign n1 = i4[17];
assign n2 = {n1, s27_1};
assign n3 = {n1, n2};
assign n4 = {n1, n3};
assign n5 = {i4[17],
  i4[16],
  i4[15],
  i4[14],
  i4[13],
  i4[12]};
assign n6 = {n4, n5};
assign n7 = i3 + n6;
assign n8 = i3 - n6;
assign n9 = s29_1 ? n7 : n8;
initial n10 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n10 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n10 <= n9;
assign n11 = ~s29_1;
assign n12 = i3[17];
assign n13 = {n12, s28_1};
assign n14 = {n12, n13};
assign n15 = {n12, n14};
assign n16 = {i3[17],
  i3[16],
  i3[15],
  i3[14],
  i3[13],
  i3[12]};
assign n17 = {n15, n16};
assign n18 = i4 + n17;
assign n19 = i4 - n17;
assign n20 = n11 ? n18 : n19;
initial n21 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n21 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n21 <= n20;
assign n22 = 18'b000000000000001010;
assign n23 = i5 + n22;
assign n24 = i5 - n22;
assign n25 = s29_1 ? n23 : n24;
initial n26 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n26 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n26 <= n25;
cf_cordic_v_18_18_18_30 s27 (n1, s27_1);
cf_cordic_v_18_18_18_30 s28 (n12, s28_1);
cf_cordic_v_18_18_18_32 s29 (i4, s29_1);
assign o3 = n26;
assign o2 = n21;
assign o1 = n10;
endmodule

module cf_cordic_v_18_18_18_20 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   [17:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [17:0] n4;
wire   n5;
wire   [17:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
reg    [17:0] n9;
wire   [17:0] n10;
wire   [17:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
reg    [17:0] n14;
wire   [17:0] s15_1;
wire   [17:0] s16_1;
wire   s17_1;
assign n1 = i3 + s16_1;
assign n2 = i3 - s16_1;
assign n3 = s17_1 ? n1 : n2;
initial n4 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = ~s17_1;
assign n6 = i4 + s15_1;
assign n7 = i4 - s15_1;
assign n8 = n5 ? n6 : n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign n10 = 18'b000000000000000101;
assign n11 = i5 + n10;
assign n12 = i5 - n10;
assign n13 = s17_1 ? n11 : n12;
initial n14 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n14 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n14 <= n13;
cf_cordic_v_18_18_18_21 s15 (i3, s15_1);
cf_cordic_v_18_18_18_21 s16 (i4, s16_1);
cf_cordic_v_18_18_18_32 s17 (i4, s17_1);
assign o3 = n14;
assign o2 = n9;
assign o1 = n4;
endmodule

module cf_cordic_v_18_18_18_21 (i1, o1);
input  [17:0] i1;
output [17:0] o1;
wire   n1;
wire   [9:0] n2;
wire   [10:0] n3;
wire   [11:0] n4;
wire   [12:0] n5;
wire   [4:0] n6;
wire   [17:0] n7;
wire   [8:0] s8_1;
assign n1 = i1[17];
assign n2 = {n1, s8_1};
assign n3 = {n1, n2};
assign n4 = {n1, n3};
assign n5 = {n1, n4};
assign n6 = {i1[17],
  i1[16],
  i1[15],
  i1[14],
  i1[13]};
assign n7 = {n5, n6};
cf_cordic_v_18_18_18_30 s8 (n1, s8_1);
assign o1 = n7;
endmodule

module cf_cordic_v_18_18_18_22 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   [17:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [17:0] n4;
wire   n5;
wire   [17:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
reg    [17:0] n9;
wire   [17:0] n10;
wire   [17:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
reg    [17:0] n14;
wire   [17:0] s15_1;
wire   [17:0] s16_1;
wire   s17_1;
assign n1 = i3 + s16_1;
assign n2 = i3 - s16_1;
assign n3 = s17_1 ? n1 : n2;
initial n4 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = ~s17_1;
assign n6 = i4 + s15_1;
assign n7 = i4 - s15_1;
assign n8 = n5 ? n6 : n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign n10 = 18'b000000000000000011;
assign n11 = i5 + n10;
assign n12 = i5 - n10;
assign n13 = s17_1 ? n11 : n12;
initial n14 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n14 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n14 <= n13;
cf_cordic_v_18_18_18_23 s15 (i3, s15_1);
cf_cordic_v_18_18_18_23 s16 (i4, s16_1);
cf_cordic_v_18_18_18_32 s17 (i4, s17_1);
assign o3 = n14;
assign o2 = n9;
assign o1 = n4;
endmodule

module cf_cordic_v_18_18_18_23 (i1, o1);
input  [17:0] i1;
output [17:0] o1;
wire   n1;
wire   [9:0] n2;
wire   [10:0] n3;
wire   [11:0] n4;
wire   [12:0] n5;
wire   [13:0] n6;
wire   [3:0] n7;
wire   [17:0] n8;
wire   [8:0] s9_1;
assign n1 = i1[17];
assign n2 = {n1, s9_1};
assign n3 = {n1, n2};
assign n4 = {n1, n3};
assign n5 = {n1, n4};
assign n6 = {n1, n5};
assign n7 = {i1[17],
  i1[16],
  i1[15],
  i1[14]};
assign n8 = {n6, n7};
cf_cordic_v_18_18_18_30 s9 (n1, s9_1);
assign o1 = n8;
endmodule

module cf_cordic_v_18_18_18_24 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   [17:0] n1;
wire   [17:0] n2;
wire   [17:0] n3;
reg    [17:0] n4;
wire   n5;
wire   [17:0] n6;
wire   [17:0] n7;
wire   [17:0] n8;
reg    [17:0] n9;
wire   [17:0] n10;
wire   [17:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
reg    [17:0] n14;
wire   [17:0] s15_1;
wire   [17:0] s16_1;
wire   s17_1;
assign n1 = i3 + s16_1;
assign n2 = i3 - s16_1;
assign n3 = s17_1 ? n1 : n2;
initial n4 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n4 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n4 <= n3;
assign n5 = ~s17_1;
assign n6 = i4 + s15_1;
assign n7 = i4 - s15_1;
assign n8 = n5 ? n6 : n7;
initial n9 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n9 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n9 <= n8;
assign n10 = 18'b000000000000000001;
assign n11 = i5 + n10;
assign n12 = i5 - n10;
assign n13 = s17_1 ? n11 : n12;
initial n14 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n14 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n14 <= n13;
cf_cordic_v_18_18_18_25 s15 (i3, s15_1);
cf_cordic_v_18_18_18_25 s16 (i4, s16_1);
cf_cordic_v_18_18_18_32 s17 (i4, s17_1);
assign o3 = n14;
assign o2 = n9;
assign o1 = n4;
endmodule

module cf_cordic_v_18_18_18_25 (i1, o1);
input  [17:0] i1;
output [17:0] o1;
wire   n1;
wire   [9:0] n2;
wire   [10:0] n3;
wire   [11:0] n4;
wire   [12:0] n5;
wire   [13:0] n6;
wire   [14:0] n7;
wire   [2:0] n8;
wire   [17:0] n9;
wire   [8:0] s10_1;
assign n1 = i1[17];
assign n2 = {n1, s10_1};
assign n3 = {n1, n2};
assign n4 = {n1, n3};
assign n5 = {n1, n4};
assign n6 = {n1, n5};
assign n7 = {n1, n6};
assign n8 = {i1[17],
  i1[16],
  i1[15]};
assign n9 = {n7, n8};
cf_cordic_v_18_18_18_30 s10 (n1, s10_1);
assign o1 = n9;
endmodule

module cf_cordic_v_18_18_18_26 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   n1;
wire   [1:0] n2;
wire   [17:0] n3;
wire   [17:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
wire   n8;
wire   n9;
wire   [1:0] n10;
wire   [17:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [17:0] n14;
reg    [17:0] n15;
wire   [17:0] n16;
wire   [17:0] n17;
wire   [17:0] n18;
wire   [17:0] n19;
reg    [17:0] n20;
wire   [15:0] s21_1;
wire   [15:0] s22_1;
wire   s23_1;
assign n1 = i4[17];
assign n2 = {i4[17],
  i4[16]};
assign n3 = {s21_1, n2};
assign n4 = i3 + n3;
assign n5 = i3 - n3;
assign n6 = s23_1 ? n4 : n5;
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n7 <= n6;
assign n8 = ~s23_1;
assign n9 = i3[17];
assign n10 = {i3[17],
  i3[16]};
assign n11 = {s22_1, n10};
assign n12 = i4 + n11;
assign n13 = i4 - n11;
assign n14 = n8 ? n12 : n13;
initial n15 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n15 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n15 <= n14;
assign n16 = 18'b000000000000000001;
assign n17 = i5 + n16;
assign n18 = i5 - n16;
assign n19 = s23_1 ? n17 : n18;
initial n20 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n20 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n20 <= n19;
cf_cordic_v_18_18_18_28 s21 (n1, s21_1);
cf_cordic_v_18_18_18_28 s22 (n9, s22_1);
cf_cordic_v_18_18_18_32 s23 (i4, s23_1);
assign o3 = n20;
assign o2 = n15;
assign o1 = n7;
endmodule

module cf_cordic_v_18_18_18_27 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   n1;
wire   [16:0] n2;
wire   n3;
wire   [17:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
wire   [17:0] n7;
reg    [17:0] n8;
wire   n9;
wire   n10;
wire   [16:0] n11;
wire   n12;
wire   [17:0] n13;
wire   [17:0] n14;
wire   [17:0] n15;
wire   [17:0] n16;
reg    [17:0] n17;
wire   [17:0] n18;
wire   [17:0] n19;
wire   [17:0] n20;
wire   [17:0] n21;
reg    [17:0] n22;
wire   [15:0] s23_1;
wire   [15:0] s24_1;
wire   s25_1;
assign n1 = i4[17];
assign n2 = {n1, s23_1};
assign n3 = i4[17];
assign n4 = {n2, n3};
assign n5 = i3 + n4;
assign n6 = i3 - n4;
assign n7 = s25_1 ? n5 : n6;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
assign n9 = ~s25_1;
assign n10 = i3[17];
assign n11 = {n10, s24_1};
assign n12 = i3[17];
assign n13 = {n11, n12};
assign n14 = i4 + n13;
assign n15 = i4 - n13;
assign n16 = n9 ? n14 : n15;
initial n17 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n17 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n17 <= n16;
assign n18 = 18'b000000000000000000;
assign n19 = i5 + n18;
assign n20 = i5 - n18;
assign n21 = s25_1 ? n19 : n20;
initial n22 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n22 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n22 <= n21;
cf_cordic_v_18_18_18_28 s23 (n1, s23_1);
cf_cordic_v_18_18_18_28 s24 (n10, s24_1);
cf_cordic_v_18_18_18_32 s25 (i4, s25_1);
assign o3 = n22;
assign o2 = n17;
assign o1 = n8;
endmodule

module cf_cordic_v_18_18_18_28 (i1, o1);
input  i1;
output [15:0] o1;
wire   [9:0] n1;
wire   [10:0] n2;
wire   [11:0] n3;
wire   [12:0] n4;
wire   [13:0] n5;
wire   [14:0] n6;
wire   [15:0] n7;
wire   [8:0] s8_1;
assign n1 = {i1, s8_1};
assign n2 = {i1, n1};
assign n3 = {i1, n2};
assign n4 = {i1, n3};
assign n5 = {i1, n4};
assign n6 = {i1, n5};
assign n7 = {i1, n6};
cf_cordic_v_18_18_18_30 s8 (i1, s8_1);
assign o1 = n7;
endmodule

module cf_cordic_v_18_18_18_29 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   n1;
wire   [8:0] n2;
wire   [17:0] n3;
wire   [17:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
reg    [17:0] n7;
wire   n8;
wire   n9;
wire   [8:0] n10;
wire   [17:0] n11;
wire   [17:0] n12;
wire   [17:0] n13;
wire   [17:0] n14;
reg    [17:0] n15;
wire   [17:0] n16;
wire   [17:0] n17;
wire   [17:0] n18;
wire   [17:0] n19;
reg    [17:0] n20;
wire   [8:0] s21_1;
wire   [8:0] s22_1;
wire   s23_1;
assign n1 = i4[17];
assign n2 = {i4[17],
  i4[16],
  i4[15],
  i4[14],
  i4[13],
  i4[12],
  i4[11],
  i4[10],
  i4[9]};
assign n3 = {s21_1, n2};
assign n4 = i3 + n3;
assign n5 = i3 - n3;
assign n6 = s23_1 ? n4 : n5;
initial n7 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n7 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n7 <= n6;
assign n8 = ~s23_1;
assign n9 = i3[17];
assign n10 = {i3[17],
  i3[16],
  i3[15],
  i3[14],
  i3[13],
  i3[12],
  i3[11],
  i3[10],
  i3[9]};
assign n11 = {s22_1, n10};
assign n12 = i4 + n11;
assign n13 = i4 - n11;
assign n14 = n8 ? n12 : n13;
initial n15 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n15 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n15 <= n14;
assign n16 = 18'b000000000001010001;
assign n17 = i5 + n16;
assign n18 = i5 - n16;
assign n19 = s23_1 ? n17 : n18;
initial n20 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n20 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n20 <= n19;
cf_cordic_v_18_18_18_30 s21 (n1, s21_1);
cf_cordic_v_18_18_18_30 s22 (n9, s22_1);
cf_cordic_v_18_18_18_32 s23 (i4, s23_1);
assign o3 = n20;
assign o2 = n15;
assign o1 = n7;
endmodule

module cf_cordic_v_18_18_18_30 (i1, o1);
input  i1;
output [8:0] o1;
wire   [1:0] n1;
wire   [2:0] n2;
wire   [3:0] n3;
wire   [4:0] n4;
wire   [5:0] n5;
wire   [6:0] n6;
wire   [7:0] n7;
wire   [8:0] n8;
assign n1 = {i1, i1};
assign n2 = {i1, n1};
assign n3 = {i1, n2};
assign n4 = {i1, n3};
assign n5 = {i1, n4};
assign n6 = {i1, n5};
assign n7 = {i1, n6};
assign n8 = {i1, n7};
assign o1 = n8;
endmodule

module cf_cordic_v_18_18_18_31 (clock_c, i1, i2, i3, i4, i5, o1, o2, o3);
input  clock_c;
input  i1;
input  i2;
input  [17:0] i3;
input  [17:0] i4;
input  [17:0] i5;
output [17:0] o1;
output [17:0] o2;
output [17:0] o3;
wire   n1;
wire   [1:0] n2;
wire   [15:0] n3;
wire   [17:0] n4;
wire   [17:0] n5;
wire   [17:0] n6;
wire   [17:0] n7;
reg    [17:0] n8;
wire   n9;
wire   n10;
wire   [1:0] n11;
wire   [15:0] n12;
wire   [17:0] n13;
wire   [17:0] n14;
wire   [17:0] n15;
wire   [17:0] n16;
reg    [17:0] n17;
wire   [17:0] n18;
wire   [17:0] n19;
wire   [17:0] n20;
wire   [17:0] n21;
reg    [17:0] n22;
wire   s23_1;
assign n1 = i4[17];
assign n2 = {n1, n1};
assign n3 = {i4[17],
  i4[16],
  i4[15],
  i4[14],
  i4[13],
  i4[12],
  i4[11],
  i4[10],
  i4[9],
  i4[8],
  i4[7],
  i4[6],
  i4[5],
  i4[4],
  i4[3],
  i4[2]};
assign n4 = {n2, n3};
assign n5 = i3 + n4;
assign n6 = i3 - n4;
assign n7 = s23_1 ? n5 : n6;
initial n8 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n8 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n8 <= n7;
assign n9 = ~s23_1;
assign n10 = i3[17];
assign n11 = {n10, n10};
assign n12 = {i3[17],
  i3[16],
  i3[15],
  i3[14],
  i3[13],
  i3[12],
  i3[11],
  i3[10],
  i3[9],
  i3[8],
  i3[7],
  i3[6],
  i3[5],
  i3[4],
  i3[3],
  i3[2]};
assign n13 = {n11, n12};
assign n14 = i4 + n13;
assign n15 = i4 - n13;
assign n16 = n9 ? n14 : n15;
initial n17 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n17 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n17 <= n16;
assign n18 = 18'b000010011111101101;
assign n19 = i5 + n18;
assign n20 = i5 - n18;
assign n21 = s23_1 ? n19 : n20;
initial n22 = 18'b000000000000000000;
always @ (posedge clock_c)
  if (i2 == 1'b1)
    n22 <= 18'b000000000000000000;
  else if (i1 == 1'b1)
    n22 <= n21;
cf_cordic_v_18_18_18_32 s23 (i4, s23_1);
assign o3 = n22;
assign o2 = n17;
assign o1 = n8;
endmodule

module cf_cordic_v_18_18_18_32 (i1, o1);
input  [17:0] i1;
output o1;
wire   n1;
wire   n2;
wire   [16:0] n3;
wire   [17:0] n4;
wire   n5;
wire   [18:0] n6;
wire   [18:0] n7;
wire   n8;
wire   [18:0] n9;
assign n1 = i1[17];
assign n2 = ~n1;
assign n3 = {i1[16],
  i1[15],
  i1[14],
  i1[13],
  i1[12],
  i1[11],
  i1[10],
  i1[9],
  i1[8],
  i1[7],
  i1[6],
  i1[5],
  i1[4],
  i1[3],
  i1[2],
  i1[1],
  i1[0]};
assign n4 = {n2, n3};
assign n5 = 1'b0;
assign n6 = {n5, n4};
assign n7 = n9 - n6;
assign n8 = n7[18];
assign n9 = 19'b0100000000000000000;
assign o1 = n8;
endmodule

