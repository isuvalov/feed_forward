#
#  Copyright (c) 2003 Launchbird Design Systems, Inc.
#  All rights reserved.
#  
#  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#    Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#  
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
#  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
#  OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#  
#  
#  Overview:
#  
#    Cordics (COordinate Rotation DIgital Computers) are used to calculate
#    trigonometric functions and complex plane phase rotations.
#    This rotation mode cordic rotates a complex vector by the initial angle.
#    If the rotation will transition through +-PI/2 then the "flip_i" control
#    input must be set.
#  
#  Interface:
#  
#    Synchronization:
#      clock_c  : Clock input.
#      enable_i : Synchronous enable.
#      reset_i  : Synchronous reset.
#  
#    Inputs:
#      flip_i   : Set to perform initial rotation if rotation will transition through +-PI/2
#      real_i   : Initial real component (signed).
#      imag_i   : Initial imaginary component (signed).
#      angle_i  : Initial angle (modulo 2PI).
#  
#    Outputs:
#      real_o   : Resulting real component (signed).
#      imag_o   : Resulting imaginary component (signed).
#      angle_o  : Resulting angle (modulo 2PI).
#  
#  Built In Parameters:
#  
#    Cordic Mode    = Rotation
#    Vector Width   = 8
#    Angle Width    = 8
#    Cordic Stages  = 8
#  
#  Resulting Pipeline Latency is 10 clock cycles.
#  
#  
#  
#  Generated by Confluence 0.6.3  --  Launchbird Design Systems, Inc.  --  www.launchbird.com
#  
#  Build Date : Fri Aug 22 09:44:17 CDT 2003
#  
#  Interface
#  
#    Build Name    : cf_cordic_r_8_8_8
#    Clock Domains : clock_c  
#    Vector Input  : enable_i(1)
#    Vector Input  : reset_i(1)
#    Vector Input  : flip_i(1)
#    Vector Input  : real_i(8)
#    Vector Input  : imag_i(8)
#    Vector Input  : ang_i(8)
#    Vector Output : real_o(8)
#    Vector Output : imag_o(8)
#    Vector Output : ang_o(8)
#  
#  
#  

import sys
import time

class cf_cordic_r_8_8_8:

  def init(self):
    self.n619 = 0L
    self.n617 = 0L
    self.n615 = 0L
    self.n613 = 0L
    self.n611 = 0L
    self.n609 = 0L
    self.n607 = 0L
    self.n605 = 0L
    self.n570 = 0L
    self.n567 = 0L
    self.n566 = 0L
    self.n565 = 0L
    self.n554 = 0L
    self.n542 = 0L
    self.n533 = 0L
    self.n520 = 0L
    self.n511 = 0L
    self.n505 = 0L
    self.n499 = 0L
    self.n497 = 0L
    self.n485 = 0L
    self.n473 = 0L
    self.n465 = 0L
    self.n452 = 0L
    self.n444 = 0L
    self.n438 = 0L
    self.n432 = 0L
    self.n430 = 0L
    self.n418 = 0L
    self.n406 = 0L
    self.n399 = 0L
    self.n386 = 0L
    self.n379 = 0L
    self.n373 = 0L
    self.n367 = 0L
    self.n365 = 0L
    self.n353 = 0L
    self.n341 = 0L
    self.n335 = 0L
    self.n322 = 0L
    self.n316 = 0L
    self.n310 = 0L
    self.n304 = 0L
    self.n302 = 0L
    self.n290 = 0L
    self.n278 = 0L
    self.n273 = 0L
    self.n260 = 0L
    self.n255 = 0L
    self.n249 = 0L
    self.n243 = 0L
    self.n241 = 0L
    self.n229 = 0L
    self.n217 = 0L
    self.n213 = 0L
    self.n200 = 0L
    self.n196 = 0L
    self.n190 = 0L
    self.n184 = 0L
    self.n182 = 0L
    self.n170 = 0L
    self.n158 = 0L
    self.n155 = 0L
    self.n142 = 0L
    self.n139 = 0L
    self.n133 = 0L
    self.n127 = 0L
    self.n125 = 0L
    self.n113 = 0L
    self.n101 = 0L
    self.n86 = 0L
    self.n78 = 0L
    self.n72 = 0L
    self.n70 = 0L
    self.n39 = 0L
    self.n37 = 0L
    self.n8 = 0L
    self.n7 = 0L
    self.n6 = 0L
    self.n5 = 0L
    self.n4 = 0L
    self.n3 = 0L
    self.n556 = 0L
    self.n555 = 0L
    self.n536 = 0L
    self.n514 = 0L
    self.n498 = 0L
    self.n487 = 0L
    self.n486 = 0L
    self.n468 = 0L
    self.n447 = 0L
    self.n431 = 0L
    self.n420 = 0L
    self.n419 = 0L
    self.n402 = 0L
    self.n382 = 0L
    self.n366 = 0L
    self.n355 = 0L
    self.n354 = 0L
    self.n338 = 0L
    self.n319 = 0L
    self.n303 = 0L
    self.n292 = 0L
    self.n291 = 0L
    self.n276 = 0L
    self.n258 = 0L
    self.n242 = 0L
    self.n231 = 0L
    self.n230 = 0L
    self.n216 = 0L
    self.n199 = 0L
    self.n183 = 0L
    self.n172 = 0L
    self.n171 = 0L
    self.n159 = 0L
    self.n143 = 0L
    self.n126 = 0L
    self.n115 = 0L
    self.n114 = 0L
    self.n104 = 0L
    self.n103 = 0L
    self.n89 = 0L
    self.n88 = 0L
    self.n71 = 0L
    self.n44 = 0L
    self.n40 = 0L
    self.n38 = 0L
    self.n36 = 0L
    self.n36r = 0L
    self.n36e = 0L
    self.n36d = 0L
    self.n29 = 0L
    self.n29r = 0L
    self.n29e = 0L
    self.n29d = 0L
    self.n22 = 0L
    self.n22r = 0L
    self.n22e = 0L
    self.n22d = 0L
    self.n15 = 0L
    self.n15r = 0L
    self.n15e = 0L
    self.n15d = 0L
    self.n537 = 0L
    self.n515 = 0L
    self.n500 = 0L
    self.n469 = 0L
    self.n448 = 0L
    self.n433 = 0L
    self.n403 = 0L
    self.n383 = 0L
    self.n368 = 0L
    self.n339 = 0L
    self.n320 = 0L
    self.n305 = 0L
    self.n277 = 0L
    self.n259 = 0L
    self.n244 = 0L
    self.n218 = 0L
    self.n201 = 0L
    self.n185 = 0L
    self.n161 = 0L
    self.n160 = 0L
    self.n145 = 0L
    self.n144 = 0L
    self.n128 = 0L
    self.n73 = 0L
    self.n61 = 0L
    self.n53 = 0L
    self.n45 = 0L
    self.n538 = 0L
    self.n516 = 0L
    self.n506 = 0L
    self.n470 = 0L
    self.n449 = 0L
    self.n439 = 0L
    self.n404 = 0L
    self.n384 = 0L
    self.n374 = 0L
    self.n340 = 0L
    self.n321 = 0L
    self.n311 = 0L
    self.n279 = 0L
    self.n261 = 0L
    self.n250 = 0L
    self.n220 = 0L
    self.n219 = 0L
    self.n203 = 0L
    self.n202 = 0L
    self.n191 = 0L
    self.n134 = 0L
    self.n79 = 0L
    self.n68 = 0L
    self.n68r = 0L
    self.n68e = 0L
    self.n68d = 0L
    self.n60 = 0L
    self.n60r = 0L
    self.n60e = 0L
    self.n60d = 0L
    self.n52 = 0L
    self.n52r = 0L
    self.n52e = 0L
    self.n52d = 0L
    self.n539 = 0L
    self.n517 = 0L
    self.n509 = 0L
    self.n471 = 0L
    self.n450 = 0L
    self.n442 = 0L
    self.n405 = 0L
    self.n385 = 0L
    self.n377 = 0L
    self.n342 = 0L
    self.n323 = 0L
    self.n314 = 0L
    self.n281 = 0L
    self.n280 = 0L
    self.n263 = 0L
    self.n262 = 0L
    self.n253 = 0L
    self.n194 = 0L
    self.n137 = 0L
    self.n82 = 0L
    self.n540 = 0L
    self.n518 = 0L
    self.n510 = 0L
    self.n472 = 0L
    self.n451 = 0L
    self.n443 = 0L
    self.n407 = 0L
    self.n387 = 0L
    self.n378 = 0L
    self.n344 = 0L
    self.n343 = 0L
    self.n325 = 0L
    self.n324 = 0L
    self.n315 = 0L
    self.n254 = 0L
    self.n195 = 0L
    self.n138 = 0L
    self.n83 = 0L
    self.n557 = 0L
    self.n541 = 0L
    self.n532 = 0L
    self.n519 = 0L
    self.n488 = 0L
    self.n474 = 0L
    self.n464 = 0L
    self.n453 = 0L
    self.n421 = 0L
    self.n409 = 0L
    self.n408 = 0L
    self.n398 = 0L
    self.n389 = 0L
    self.n388 = 0L
    self.n356 = 0L
    self.n334 = 0L
    self.n326 = 0L
    self.n293 = 0L
    self.n272 = 0L
    self.n264 = 0L
    self.n232 = 0L
    self.n212 = 0L
    self.n204 = 0L
    self.n173 = 0L
    self.n154 = 0L
    self.n146 = 0L
    self.n116 = 0L
    self.n98 = 0L
    self.n90 = 0L
    self.n564 = 0L
    self.n564r = 0L
    self.n564e = 0L
    self.n564d = 0L
    self.n543 = 0L
    self.n521 = 0L
    self.n495 = 0L
    self.n495r = 0L
    self.n495e = 0L
    self.n495d = 0L
    self.n476 = 0L
    self.n475 = 0L
    self.n455 = 0L
    self.n454 = 0L
    self.n428 = 0L
    self.n428r = 0L
    self.n428e = 0L
    self.n428d = 0L
    self.n410 = 0L
    self.n390 = 0L
    self.n363 = 0L
    self.n363r = 0L
    self.n363e = 0L
    self.n363d = 0L
    self.n345 = 0L
    self.n333 = 0L
    self.n333r = 0L
    self.n333e = 0L
    self.n333d = 0L
    self.n300 = 0L
    self.n300r = 0L
    self.n300e = 0L
    self.n300d = 0L
    self.n282 = 0L
    self.n271 = 0L
    self.n271r = 0L
    self.n271e = 0L
    self.n271d = 0L
    self.n239 = 0L
    self.n239r = 0L
    self.n239e = 0L
    self.n239d = 0L
    self.n221 = 0L
    self.n211 = 0L
    self.n211r = 0L
    self.n211e = 0L
    self.n211d = 0L
    self.n180 = 0L
    self.n180r = 0L
    self.n180e = 0L
    self.n180d = 0L
    self.n162 = 0L
    self.n153 = 0L
    self.n153r = 0L
    self.n153e = 0L
    self.n153d = 0L
    self.n123 = 0L
    self.n123r = 0L
    self.n123e = 0L
    self.n123d = 0L
    self.n105 = 0L
    self.n97 = 0L
    self.n97r = 0L
    self.n97e = 0L
    self.n97d = 0L
    self.n545 = 0L
    self.n544 = 0L
    self.n523 = 0L
    self.n522 = 0L
    self.n477 = 0L
    self.n456 = 0L
    self.n417 = 0L
    self.n417r = 0L
    self.n417e = 0L
    self.n417d = 0L
    self.n397 = 0L
    self.n397r = 0L
    self.n397e = 0L
    self.n397d = 0L
    self.n352 = 0L
    self.n352r = 0L
    self.n352e = 0L
    self.n352d = 0L
    self.n289 = 0L
    self.n289r = 0L
    self.n289e = 0L
    self.n289d = 0L
    self.n228 = 0L
    self.n228r = 0L
    self.n228e = 0L
    self.n228d = 0L
    self.n169 = 0L
    self.n169r = 0L
    self.n169e = 0L
    self.n169d = 0L
    self.n112 = 0L
    self.n112r = 0L
    self.n112e = 0L
    self.n112d = 0L
    self.n546 = 0L
    self.n524 = 0L
    self.n484 = 0L
    self.n484r = 0L
    self.n484e = 0L
    self.n484d = 0L
    self.n463 = 0L
    self.n463r = 0L
    self.n463e = 0L
    self.n463d = 0L
    self.n553 = 0L
    self.n553r = 0L
    self.n553e = 0L
    self.n553d = 0L
    self.n531 = 0L
    self.n531r = 0L
    self.n531e = 0L
    self.n531d = 0L
    self.calc(0L, 0L, 0L, 0L, 0L, 0L, )

  def calc(self, enable_i, reset_i, flip_i, real_i, imag_i, ang_i, ):
    self.n619 = 0x080L
    self.n617 = 0x080L
    self.n615 = 0x080L
    self.n613 = 0x080L
    self.n611 = 0x080L
    self.n609 = 0x080L
    self.n607 = 0x080L
    self.n605 = 0x080L
    self.n570 = 0x80L
    ang_o = self.n564
    self.n567 = self.n564
    imag_o = self.n553
    self.n566 = self.n553
    real_o = self.n531
    self.n565 = self.n531
    self.n554 = 0x00L
    self.n542 = ((self.n463 & 0x80L) >> 7)
    self.n533 = ((self.n463 & 0x80L) >> 7)
    self.n520 = ((self.n484 & 0x80L) >> 7)
    self.n511 = ((self.n484 & 0x80L) >> 7)
    self.n505 = 0x0L
    self.n499 = (self.n495 & 0x40L) | (self.n495 & 0x20L) | (self.n495 & 0x10L) | (self.n495 & 0x8L) | (self.n495 & 0x4L) | (self.n495 & 0x2L) | (self.n495 & 0x1L)
    self.n497 = ((self.n495 & 0x80L) >> 7)
    self.n485 = 0x01L
    self.n473 = ((self.n397 & 0x80L) >> 6) | ((self.n397 & 0x40L) >> 6)
    self.n465 = ((self.n397 & 0x80L) >> 7)
    self.n452 = ((self.n417 & 0x80L) >> 6) | ((self.n417 & 0x40L) >> 6)
    self.n444 = ((self.n417 & 0x80L) >> 7)
    self.n438 = 0x0L
    self.n432 = (self.n428 & 0x40L) | (self.n428 & 0x20L) | (self.n428 & 0x10L) | (self.n428 & 0x8L) | (self.n428 & 0x4L) | (self.n428 & 0x2L) | (self.n428 & 0x1L)
    self.n430 = ((self.n428 & 0x80L) >> 7)
    self.n418 = 0x01L
    self.n406 = ((self.n333 & 0x80L) >> 5) | ((self.n333 & 0x40L) >> 5) | ((self.n333 & 0x20L) >> 5)
    self.n399 = ((self.n333 & 0x80L) >> 7)
    self.n386 = ((self.n352 & 0x80L) >> 5) | ((self.n352 & 0x40L) >> 5) | ((self.n352 & 0x20L) >> 5)
    self.n379 = ((self.n352 & 0x80L) >> 7)
    self.n373 = 0x0L
    self.n367 = (self.n363 & 0x40L) | (self.n363 & 0x20L) | (self.n363 & 0x10L) | (self.n363 & 0x8L) | (self.n363 & 0x4L) | (self.n363 & 0x2L) | (self.n363 & 0x1L)
    self.n365 = ((self.n363 & 0x80L) >> 7)
    self.n353 = 0x03L
    self.n341 = ((self.n271 & 0x80L) >> 4) | ((self.n271 & 0x40L) >> 4) | ((self.n271 & 0x20L) >> 4) | ((self.n271 & 0x10L) >> 4)
    self.n335 = ((self.n271 & 0x80L) >> 7)
    self.n322 = ((self.n289 & 0x80L) >> 4) | ((self.n289 & 0x40L) >> 4) | ((self.n289 & 0x20L) >> 4) | ((self.n289 & 0x10L) >> 4)
    self.n316 = ((self.n289 & 0x80L) >> 7)
    self.n310 = 0x0L
    self.n304 = (self.n300 & 0x40L) | (self.n300 & 0x20L) | (self.n300 & 0x10L) | (self.n300 & 0x8L) | (self.n300 & 0x4L) | (self.n300 & 0x2L) | (self.n300 & 0x1L)
    self.n302 = ((self.n300 & 0x80L) >> 7)
    self.n290 = 0x05L
    self.n278 = ((self.n211 & 0x80L) >> 3) | ((self.n211 & 0x40L) >> 3) | ((self.n211 & 0x20L) >> 3) | ((self.n211 & 0x10L) >> 3) | ((self.n211 & 0x8L) >> 3)
    self.n273 = ((self.n211 & 0x80L) >> 7)
    self.n260 = ((self.n228 & 0x80L) >> 3) | ((self.n228 & 0x40L) >> 3) | ((self.n228 & 0x20L) >> 3) | ((self.n228 & 0x10L) >> 3) | ((self.n228 & 0x8L) >> 3)
    self.n255 = ((self.n228 & 0x80L) >> 7)
    self.n249 = 0x0L
    self.n243 = (self.n239 & 0x40L) | (self.n239 & 0x20L) | (self.n239 & 0x10L) | (self.n239 & 0x8L) | (self.n239 & 0x4L) | (self.n239 & 0x2L) | (self.n239 & 0x1L)
    self.n241 = ((self.n239 & 0x80L) >> 7)
    self.n229 = 0x0AL
    self.n217 = ((self.n153 & 0x80L) >> 2) | ((self.n153 & 0x40L) >> 2) | ((self.n153 & 0x20L) >> 2) | ((self.n153 & 0x10L) >> 2) | ((self.n153 & 0x8L) >> 2) | ((self.n153 & 0x4L) >> 2)
    self.n213 = ((self.n153 & 0x80L) >> 7)
    self.n200 = ((self.n169 & 0x80L) >> 2) | ((self.n169 & 0x40L) >> 2) | ((self.n169 & 0x20L) >> 2) | ((self.n169 & 0x10L) >> 2) | ((self.n169 & 0x8L) >> 2) | ((self.n169 & 0x4L) >> 2)
    self.n196 = ((self.n169 & 0x80L) >> 7)
    self.n190 = 0x0L
    self.n184 = (self.n180 & 0x40L) | (self.n180 & 0x20L) | (self.n180 & 0x10L) | (self.n180 & 0x8L) | (self.n180 & 0x4L) | (self.n180 & 0x2L) | (self.n180 & 0x1L)
    self.n182 = ((self.n180 & 0x80L) >> 7)
    self.n170 = 0x13L
    self.n158 = ((self.n97 & 0x80L) >> 1) | ((self.n97 & 0x40L) >> 1) | ((self.n97 & 0x20L) >> 1) | ((self.n97 & 0x10L) >> 1) | ((self.n97 & 0x8L) >> 1) | ((self.n97 & 0x4L) >> 1) | ((self.n97 & 0x2L) >> 1)
    self.n155 = ((self.n97 & 0x80L) >> 7)
    self.n142 = ((self.n112 & 0x80L) >> 1) | ((self.n112 & 0x40L) >> 1) | ((self.n112 & 0x20L) >> 1) | ((self.n112 & 0x10L) >> 1) | ((self.n112 & 0x8L) >> 1) | ((self.n112 & 0x4L) >> 1) | ((self.n112 & 0x2L) >> 1)
    self.n139 = ((self.n112 & 0x80L) >> 7)
    self.n133 = 0x0L
    self.n127 = (self.n123 & 0x40L) | (self.n123 & 0x20L) | (self.n123 & 0x10L) | (self.n123 & 0x8L) | (self.n123 & 0x4L) | (self.n123 & 0x2L) | (self.n123 & 0x1L)
    self.n125 = ((self.n123 & 0x80L) >> 7)
    self.n113 = 0x20L
    self.n101 = (self.n52 & 0x80L) | (self.n52 & 0x40L) | (self.n52 & 0x20L) | (self.n52 & 0x10L) | (self.n52 & 0x8L) | (self.n52 & 0x4L) | (self.n52 & 0x2L) | (self.n52 & 0x1L)
    self.n86 = (self.n60 & 0x80L) | (self.n60 & 0x40L) | (self.n60 & 0x20L) | (self.n60 & 0x10L) | (self.n60 & 0x8L) | (self.n60 & 0x4L) | (self.n60 & 0x2L) | (self.n60 & 0x1L)
    self.n78 = 0x0L
    self.n72 = (self.n68 & 0x40L) | (self.n68 & 0x20L) | (self.n68 & 0x10L) | (self.n68 & 0x8L) | (self.n68 & 0x4L) | (self.n68 & 0x2L) | (self.n68 & 0x1L)
    self.n70 = ((self.n68 & 0x80L) >> 7)
    self.n39 = 0x00L
    self.n37 = 0x00L
    self.n8 = ang_i
    self.n7 = imag_i
    self.n6 = real_i
    self.n5 = flip_i
    self.n4 = reset_i
    self.n3 = enable_i
    self.n556 = (self.n495 - self.n554) & 0xFFL
    self.n555 = (self.n495 + self.n554) & 0xFFL
    self.n536 = self.n533 << 1 | self.n533
    self.n514 = self.n511 << 1 | self.n511
    self.n498 = ~self.n497 & 0x1L
    self.n487 = (self.n428 - self.n485) & 0xFFL
    self.n486 = (self.n428 + self.n485) & 0xFFL
    self.n468 = self.n465 << 1 | self.n465
    self.n447 = self.n444 << 1 | self.n444
    self.n431 = ~self.n430 & 0x1L
    self.n420 = (self.n363 - self.n418) & 0xFFL
    self.n419 = (self.n363 + self.n418) & 0xFFL
    self.n402 = self.n399 << 1 | self.n399
    self.n382 = self.n379 << 1 | self.n379
    self.n366 = ~self.n365 & 0x1L
    self.n355 = (self.n300 - self.n353) & 0xFFL
    self.n354 = (self.n300 + self.n353) & 0xFFL
    self.n338 = self.n335 << 1 | self.n335
    self.n319 = self.n316 << 1 | self.n316
    self.n303 = ~self.n302 & 0x1L
    self.n292 = (self.n239 - self.n290) & 0xFFL
    self.n291 = (self.n239 + self.n290) & 0xFFL
    self.n276 = self.n273 << 1 | self.n273
    self.n258 = self.n255 << 1 | self.n255
    self.n242 = ~self.n241 & 0x1L
    self.n231 = (self.n180 - self.n229) & 0xFFL
    self.n230 = (self.n180 + self.n229) & 0xFFL
    self.n216 = self.n213 << 1 | self.n213
    self.n199 = self.n196 << 1 | self.n196
    self.n183 = ~self.n182 & 0x1L
    self.n172 = (self.n123 - self.n170) & 0xFFL
    self.n171 = (self.n123 + self.n170) & 0xFFL
    self.n159 = self.n155 << 7 | self.n158
    self.n143 = self.n139 << 7 | self.n142
    self.n126 = ~self.n125 & 0x1L
    self.n115 = (self.n68 - self.n113) & 0xFFL
    self.n114 = (self.n68 + self.n113) & 0xFFL
    self.n104 = (self.n60 - self.n101) & 0xFFL
    self.n103 = (self.n60 + self.n101) & 0xFFL
    self.n89 = (self.n52 - self.n86) & 0xFFL
    self.n88 = (self.n52 + self.n86) & 0xFFL
    self.n71 = ~self.n70 & 0x1L
    self.n44 = (self.n36 - self.n570) & 0xFFL
    self.n40 = (self.n39 - self.n29) & 0xFFL
    self.n38 = (self.n37 - self.n22) & 0xFFL
    self.n36r = self.n4
    self.n36e = self.n3
    self.n36d = self.n8
    self.n29r = self.n4
    self.n29e = self.n3
    self.n29d = self.n7
    self.n22r = self.n4
    self.n22e = self.n3
    self.n22d = self.n6
    self.n15r = self.n4
    self.n15e = self.n3
    self.n15d = self.n5
    self.n537 = self.n533 << 2 | self.n536
    self.n515 = self.n511 << 2 | self.n514
    self.n500 = self.n498 << 7 | self.n499
    self.n469 = self.n465 << 2 | self.n468
    self.n448 = self.n444 << 2 | self.n447
    self.n433 = self.n431 << 7 | self.n432
    self.n403 = self.n399 << 2 | self.n402
    self.n383 = self.n379 << 2 | self.n382
    self.n368 = self.n366 << 7 | self.n367
    self.n339 = self.n335 << 2 | self.n338
    self.n320 = self.n316 << 2 | self.n319
    self.n305 = self.n303 << 7 | self.n304
    self.n277 = self.n273 << 2 | self.n276
    self.n259 = self.n255 << 2 | self.n258
    self.n244 = self.n242 << 7 | self.n243
    self.n218 = self.n216 << 6 | self.n217
    self.n201 = self.n199 << 6 | self.n200
    self.n185 = self.n183 << 7 | self.n184
    self.n161 = (self.n112 - self.n159) & 0xFFL
    self.n160 = (self.n112 + self.n159) & 0xFFL
    self.n145 = (self.n97 - self.n143) & 0xFFL
    self.n144 = (self.n97 + self.n143) & 0xFFL
    self.n128 = self.n126 << 7 | self.n127
    self.n73 = self.n71 << 7 | self.n72
    if self.n15:
      self.n61 = self.n44
    else:
      self.n61 = self.n36
    if self.n15:
      self.n53 = self.n40
    else:
      self.n53 = self.n29
    if self.n15:
      self.n45 = self.n38
    else:
      self.n45 = self.n22
    self.n538 = self.n533 << 3 | self.n537
    self.n516 = self.n511 << 3 | self.n515
    self.n506 = self.n505 << 8 | self.n500
    self.n470 = self.n465 << 3 | self.n469
    self.n449 = self.n444 << 3 | self.n448
    self.n439 = self.n438 << 8 | self.n433
    self.n404 = self.n399 << 3 | self.n403
    self.n384 = self.n379 << 3 | self.n383
    self.n374 = self.n373 << 8 | self.n368
    self.n340 = self.n335 << 3 | self.n339
    self.n321 = self.n316 << 3 | self.n320
    self.n311 = self.n310 << 8 | self.n305
    self.n279 = self.n277 << 5 | self.n278
    self.n261 = self.n259 << 5 | self.n260
    self.n250 = self.n249 << 8 | self.n244
    self.n220 = (self.n169 - self.n218) & 0xFFL
    self.n219 = (self.n169 + self.n218) & 0xFFL
    self.n203 = (self.n153 - self.n201) & 0xFFL
    self.n202 = (self.n153 + self.n201) & 0xFFL
    self.n191 = self.n190 << 8 | self.n185
    self.n134 = self.n133 << 8 | self.n128
    self.n79 = self.n78 << 8 | self.n73
    self.n68r = self.n4
    self.n68e = self.n3
    self.n68d = self.n61
    self.n60r = self.n4
    self.n60e = self.n3
    self.n60d = self.n53
    self.n52r = self.n4
    self.n52e = self.n3
    self.n52d = self.n45
    self.n539 = self.n533 << 4 | self.n538
    self.n517 = self.n511 << 4 | self.n516
    self.n509 = (self.n506 - self.n619) & 0x1FFL
    self.n471 = self.n465 << 4 | self.n470
    self.n450 = self.n444 << 4 | self.n449
    self.n442 = (self.n439 - self.n617) & 0x1FFL
    self.n405 = self.n399 << 4 | self.n404
    self.n385 = self.n379 << 4 | self.n384
    self.n377 = (self.n374 - self.n615) & 0x1FFL
    self.n342 = self.n340 << 4 | self.n341
    self.n323 = self.n321 << 4 | self.n322
    self.n314 = (self.n311 - self.n613) & 0x1FFL
    self.n281 = (self.n228 - self.n279) & 0xFFL
    self.n280 = (self.n228 + self.n279) & 0xFFL
    self.n263 = (self.n211 - self.n261) & 0xFFL
    self.n262 = (self.n211 + self.n261) & 0xFFL
    self.n253 = (self.n250 - self.n611) & 0x1FFL
    self.n194 = (self.n191 - self.n609) & 0x1FFL
    self.n137 = (self.n134 - self.n607) & 0x1FFL
    self.n82 = (self.n79 - self.n605) & 0x1FFL
    self.n540 = self.n533 << 5 | self.n539
    self.n518 = self.n511 << 5 | self.n517
    self.n510 = ((self.n509 & 0x100L) >> 8)
    self.n472 = self.n465 << 5 | self.n471
    self.n451 = self.n444 << 5 | self.n450
    self.n443 = ((self.n442 & 0x100L) >> 8)
    self.n407 = self.n405 << 3 | self.n406
    self.n387 = self.n385 << 3 | self.n386
    self.n378 = ((self.n377 & 0x100L) >> 8)
    self.n344 = (self.n289 - self.n342) & 0xFFL
    self.n343 = (self.n289 + self.n342) & 0xFFL
    self.n325 = (self.n271 - self.n323) & 0xFFL
    self.n324 = (self.n271 + self.n323) & 0xFFL
    self.n315 = ((self.n314 & 0x100L) >> 8)
    self.n254 = ((self.n253 & 0x100L) >> 8)
    self.n195 = ((self.n194 & 0x100L) >> 8)
    self.n138 = ((self.n137 & 0x100L) >> 8)
    self.n83 = ((self.n82 & 0x100L) >> 8)
    if self.n510:
      self.n557 = self.n555
    else:
      self.n557 = self.n556
    self.n541 = self.n533 << 6 | self.n540
    self.n532 = ~self.n510 & 0x1L
    self.n519 = self.n511 << 6 | self.n518
    if self.n443:
      self.n488 = self.n486
    else:
      self.n488 = self.n487
    self.n474 = self.n472 << 2 | self.n473
    self.n464 = ~self.n443 & 0x1L
    self.n453 = self.n451 << 2 | self.n452
    if self.n378:
      self.n421 = self.n419
    else:
      self.n421 = self.n420
    self.n409 = (self.n352 - self.n407) & 0xFFL
    self.n408 = (self.n352 + self.n407) & 0xFFL
    self.n398 = ~self.n378 & 0x1L
    self.n389 = (self.n333 - self.n387) & 0xFFL
    self.n388 = (self.n333 + self.n387) & 0xFFL
    if self.n315:
      self.n356 = self.n354
    else:
      self.n356 = self.n355
    self.n334 = ~self.n315 & 0x1L
    if self.n315:
      self.n326 = self.n324
    else:
      self.n326 = self.n325
    if self.n254:
      self.n293 = self.n291
    else:
      self.n293 = self.n292
    self.n272 = ~self.n254 & 0x1L
    if self.n254:
      self.n264 = self.n262
    else:
      self.n264 = self.n263
    if self.n195:
      self.n232 = self.n230
    else:
      self.n232 = self.n231
    self.n212 = ~self.n195 & 0x1L
    if self.n195:
      self.n204 = self.n202
    else:
      self.n204 = self.n203
    if self.n138:
      self.n173 = self.n171
    else:
      self.n173 = self.n172
    self.n154 = ~self.n138 & 0x1L
    if self.n138:
      self.n146 = self.n144
    else:
      self.n146 = self.n145
    if self.n83:
      self.n116 = self.n114
    else:
      self.n116 = self.n115
    self.n98 = ~self.n83 & 0x1L
    if self.n83:
      self.n90 = self.n88
    else:
      self.n90 = self.n89
    self.n564r = self.n4
    self.n564e = self.n3
    self.n564d = self.n557
    self.n543 = self.n541 << 1 | self.n542
    self.n521 = self.n519 << 1 | self.n520
    self.n495r = self.n4
    self.n495e = self.n3
    self.n495d = self.n488
    self.n476 = (self.n417 - self.n474) & 0xFFL
    self.n475 = (self.n417 + self.n474) & 0xFFL
    self.n455 = (self.n397 - self.n453) & 0xFFL
    self.n454 = (self.n397 + self.n453) & 0xFFL
    self.n428r = self.n4
    self.n428e = self.n3
    self.n428d = self.n421
    if self.n398:
      self.n410 = self.n408
    else:
      self.n410 = self.n409
    if self.n378:
      self.n390 = self.n388
    else:
      self.n390 = self.n389
    self.n363r = self.n4
    self.n363e = self.n3
    self.n363d = self.n356
    if self.n334:
      self.n345 = self.n343
    else:
      self.n345 = self.n344
    self.n333r = self.n4
    self.n333e = self.n3
    self.n333d = self.n326
    self.n300r = self.n4
    self.n300e = self.n3
    self.n300d = self.n293
    if self.n272:
      self.n282 = self.n280
    else:
      self.n282 = self.n281
    self.n271r = self.n4
    self.n271e = self.n3
    self.n271d = self.n264
    self.n239r = self.n4
    self.n239e = self.n3
    self.n239d = self.n232
    if self.n212:
      self.n221 = self.n219
    else:
      self.n221 = self.n220
    self.n211r = self.n4
    self.n211e = self.n3
    self.n211d = self.n204
    self.n180r = self.n4
    self.n180e = self.n3
    self.n180d = self.n173
    if self.n154:
      self.n162 = self.n160
    else:
      self.n162 = self.n161
    self.n153r = self.n4
    self.n153e = self.n3
    self.n153d = self.n146
    self.n123r = self.n4
    self.n123e = self.n3
    self.n123d = self.n116
    if self.n98:
      self.n105 = self.n103
    else:
      self.n105 = self.n104
    self.n97r = self.n4
    self.n97e = self.n3
    self.n97d = self.n90
    self.n545 = (self.n484 - self.n543) & 0xFFL
    self.n544 = (self.n484 + self.n543) & 0xFFL
    self.n523 = (self.n463 - self.n521) & 0xFFL
    self.n522 = (self.n463 + self.n521) & 0xFFL
    if self.n464:
      self.n477 = self.n475
    else:
      self.n477 = self.n476
    if self.n443:
      self.n456 = self.n454
    else:
      self.n456 = self.n455
    self.n417r = self.n4
    self.n417e = self.n3
    self.n417d = self.n410
    self.n397r = self.n4
    self.n397e = self.n3
    self.n397d = self.n390
    self.n352r = self.n4
    self.n352e = self.n3
    self.n352d = self.n345
    self.n289r = self.n4
    self.n289e = self.n3
    self.n289d = self.n282
    self.n228r = self.n4
    self.n228e = self.n3
    self.n228d = self.n221
    self.n169r = self.n4
    self.n169e = self.n3
    self.n169d = self.n162
    self.n112r = self.n4
    self.n112e = self.n3
    self.n112d = self.n105
    if self.n532:
      self.n546 = self.n544
    else:
      self.n546 = self.n545
    if self.n510:
      self.n524 = self.n522
    else:
      self.n524 = self.n523
    self.n484r = self.n4
    self.n484e = self.n3
    self.n484d = self.n477
    self.n463r = self.n4
    self.n463e = self.n3
    self.n463d = self.n456
    self.n553r = self.n4
    self.n553e = self.n3
    self.n553d = self.n546
    self.n531r = self.n4
    self.n531e = self.n3
    self.n531d = self.n524
    return (real_o, imag_o, ang_o, )

  def cycle_clock(self):
    if self.n15r:
      self.n15 = 0L
    elif self.n15e:
        self.n15 = self.n15d
    if self.n22r:
      self.n22 = 0L
    elif self.n22e:
        self.n22 = self.n22d
    if self.n29r:
      self.n29 = 0L
    elif self.n29e:
        self.n29 = self.n29d
    if self.n36r:
      self.n36 = 0L
    elif self.n36e:
        self.n36 = self.n36d
    if self.n52r:
      self.n52 = 0L
    elif self.n52e:
        self.n52 = self.n52d
    if self.n60r:
      self.n60 = 0L
    elif self.n60e:
        self.n60 = self.n60d
    if self.n68r:
      self.n68 = 0L
    elif self.n68e:
        self.n68 = self.n68d
    if self.n97r:
      self.n97 = 0L
    elif self.n97e:
        self.n97 = self.n97d
    if self.n112r:
      self.n112 = 0L
    elif self.n112e:
        self.n112 = self.n112d
    if self.n123r:
      self.n123 = 0L
    elif self.n123e:
        self.n123 = self.n123d
    if self.n153r:
      self.n153 = 0L
    elif self.n153e:
        self.n153 = self.n153d
    if self.n169r:
      self.n169 = 0L
    elif self.n169e:
        self.n169 = self.n169d
    if self.n180r:
      self.n180 = 0L
    elif self.n180e:
        self.n180 = self.n180d
    if self.n211r:
      self.n211 = 0L
    elif self.n211e:
        self.n211 = self.n211d
    if self.n228r:
      self.n228 = 0L
    elif self.n228e:
        self.n228 = self.n228d
    if self.n239r:
      self.n239 = 0L
    elif self.n239e:
        self.n239 = self.n239d
    if self.n271r:
      self.n271 = 0L
    elif self.n271e:
        self.n271 = self.n271d
    if self.n289r:
      self.n289 = 0L
    elif self.n289e:
        self.n289 = self.n289d
    if self.n300r:
      self.n300 = 0L
    elif self.n300e:
        self.n300 = self.n300d
    if self.n333r:
      self.n333 = 0L
    elif self.n333e:
        self.n333 = self.n333d
    if self.n352r:
      self.n352 = 0L
    elif self.n352e:
        self.n352 = self.n352d
    if self.n363r:
      self.n363 = 0L
    elif self.n363e:
        self.n363 = self.n363d
    if self.n397r:
      self.n397 = 0L
    elif self.n397e:
        self.n397 = self.n397d
    if self.n417r:
      self.n417 = 0L
    elif self.n417e:
        self.n417 = self.n417d
    if self.n428r:
      self.n428 = 0L
    elif self.n428e:
        self.n428 = self.n428d
    if self.n463r:
      self.n463 = 0L
    elif self.n463e:
        self.n463 = self.n463d
    if self.n484r:
      self.n484 = 0L
    elif self.n484e:
        self.n484 = self.n484d
    if self.n495r:
      self.n495 = 0L
    elif self.n495e:
        self.n495 = self.n495d
    if self.n531r:
      self.n531 = 0L
    elif self.n531e:
        self.n531 = self.n531d
    if self.n553r:
      self.n553 = 0L
    elif self.n553e:
        self.n553 = self.n553d
    if self.n564r:
      self.n564 = 0L
    elif self.n564e:
        self.n564 = self.n564d

  def sim_init(self, vcdFile):
    self.sim_file = open(vcdFile, 'w')
    self.sim_count = 1
    self.init()
    self.sim_n3 = self.n3
    self.sim_n4 = self.n4
    self.sim_n5 = self.n5
    self.sim_n6 = self.n6
    self.sim_n7 = self.n7
    self.sim_n8 = self.n8
    self.sim_n565 = self.n565
    self.sim_n566 = self.n566
    self.sim_n567 = self.n567
    self.sim_file.write("$date\n")
    self.sim_file.write("  " + time.strftime("%a %b %d %H:%M:%S %Y", time.localtime()) + "\n")
    self.sim_file.write("$end\n")
    self.sim_file.write("$version\n  Confluence 0.6.3 -- Launchbird Design Systems, Inc.\n$end\n")
    self.sim_file.write("$timescale\n  1 ns\n$end\n")
    self.sim_file.write("$scope module cf_cordic_r_8_8_8 $end\n")
    self.sim_file.write("$var wire 1 ! enable_i $end\n")
    self.sim_file.write("$var wire 1 \" reset_i $end\n")
    self.sim_file.write("$var wire 1 # flip_i $end\n")
    self.sim_file.write("$var wire 8 $ real_i $end\n")
    self.sim_file.write("$var wire 8 % imag_i $end\n")
    self.sim_file.write("$var wire 8 & ang_i $end\n")
    self.sim_file.write("$var wire 8 ' real_o $end\n")
    self.sim_file.write("$var wire 8 ( imag_o $end\n")
    self.sim_file.write("$var wire 8 ) ang_o $end\n")
    self.sim_file.write("$upscope $end\n")
    self.sim_file.write("$enddefinitions $end\n")
    self.sim_file.write("#0\n")
    self.sim_file.write("$dumpvars\n")
    if self.n3:
      self.sim_file.write("1!\n")
    else:
      self.sim_file.write("0!\n")
    if self.n4:
      self.sim_file.write("1\"\n")
    else:
      self.sim_file.write("0\"\n")
    if self.n5:
      self.sim_file.write("1#\n")
    else:
      self.sim_file.write("0#\n")
    found = 0
    for bit in range(7, -1, -1):
      if found:
        if self.n6 & (2L ** bit):
          self.sim_file.write("1")
        else:
          self.sim_file.write("0")
      else:
        if self.n6 & (2L ** bit):
          self.sim_file.write("b1")
          found = 1
    if not found:
      self.sim_file.write("b0")
    self.sim_file.write(" $\n")
    found = 0
    for bit in range(7, -1, -1):
      if found:
        if self.n7 & (2L ** bit):
          self.sim_file.write("1")
        else:
          self.sim_file.write("0")
      else:
        if self.n7 & (2L ** bit):
          self.sim_file.write("b1")
          found = 1
    if not found:
      self.sim_file.write("b0")
    self.sim_file.write(" %\n")
    found = 0
    for bit in range(7, -1, -1):
      if found:
        if self.n8 & (2L ** bit):
          self.sim_file.write("1")
        else:
          self.sim_file.write("0")
      else:
        if self.n8 & (2L ** bit):
          self.sim_file.write("b1")
          found = 1
    if not found:
      self.sim_file.write("b0")
    self.sim_file.write(" &\n")
    found = 0
    for bit in range(7, -1, -1):
      if found:
        if self.n565 & (2L ** bit):
          self.sim_file.write("1")
        else:
          self.sim_file.write("0")
      else:
        if self.n565 & (2L ** bit):
          self.sim_file.write("b1")
          found = 1
    if not found:
      self.sim_file.write("b0")
    self.sim_file.write(" '\n")
    found = 0
    for bit in range(7, -1, -1):
      if found:
        if self.n566 & (2L ** bit):
          self.sim_file.write("1")
        else:
          self.sim_file.write("0")
      else:
        if self.n566 & (2L ** bit):
          self.sim_file.write("b1")
          found = 1
    if not found:
      self.sim_file.write("b0")
    self.sim_file.write(" (\n")
    found = 0
    for bit in range(7, -1, -1):
      if found:
        if self.n567 & (2L ** bit):
          self.sim_file.write("1")
        else:
          self.sim_file.write("0")
      else:
        if self.n567 & (2L ** bit):
          self.sim_file.write("b1")
          found = 1
    if not found:
      self.sim_file.write("b0")
    self.sim_file.write(" )\n")
    self.sim_file.write("$end\n")

  def sim_end(self):
    self.sim_file.write("#%d\n" % self.sim_count)
    self.sim_file.close()

  def sim_sample(self):
    changed = 0
    if self.sim_n3 != self.n3:
      if not changed:
        changed = 1
        self.sim_file.write("#%d\n" % self.sim_count)
      if self.n3:
        self.sim_file.write("1!\n")
      else:
        self.sim_file.write("0!\n")
      self.sim_n3 = self.n3
    if self.sim_n4 != self.n4:
      if not changed:
        changed = 1
        self.sim_file.write("#%d\n" % self.sim_count)
      if self.n4:
        self.sim_file.write("1\"\n")
      else:
        self.sim_file.write("0\"\n")
      self.sim_n4 = self.n4
    if self.sim_n5 != self.n5:
      if not changed:
        changed = 1
        self.sim_file.write("#%d\n" % self.sim_count)
      if self.n5:
        self.sim_file.write("1#\n")
      else:
        self.sim_file.write("0#\n")
      self.sim_n5 = self.n5
    if self.sim_n6 != self.n6:
      if not changed:
        changed = 1
        self.sim_file.write("#%d\n" % self.sim_count)
      found = 0
      for bit in range(7, -1, -1):
        if found:
          if self.n6 & (2L ** bit):
            self.sim_file.write("1")
          else:
            self.sim_file.write("0")
        else:
          if self.n6 & (2L ** bit):
            self.sim_file.write("b1")
            found = 1
      if not found:
        self.sim_file.write("b0")
      self.sim_file.write(" $\n")
      self.sim_n6 = self.n6
    if self.sim_n7 != self.n7:
      if not changed:
        changed = 1
        self.sim_file.write("#%d\n" % self.sim_count)
      found = 0
      for bit in range(7, -1, -1):
        if found:
          if self.n7 & (2L ** bit):
            self.sim_file.write("1")
          else:
            self.sim_file.write("0")
        else:
          if self.n7 & (2L ** bit):
            self.sim_file.write("b1")
            found = 1
      if not found:
        self.sim_file.write("b0")
      self.sim_file.write(" %\n")
      self.sim_n7 = self.n7
    if self.sim_n8 != self.n8:
      if not changed:
        changed = 1
        self.sim_file.write("#%d\n" % self.sim_count)
      found = 0
      for bit in range(7, -1, -1):
        if found:
          if self.n8 & (2L ** bit):
            self.sim_file.write("1")
          else:
            self.sim_file.write("0")
        else:
          if self.n8 & (2L ** bit):
            self.sim_file.write("b1")
            found = 1
      if not found:
        self.sim_file.write("b0")
      self.sim_file.write(" &\n")
      self.sim_n8 = self.n8
    if self.sim_n565 != self.n565:
      if not changed:
        changed = 1
        self.sim_file.write("#%d\n" % self.sim_count)
      found = 0
      for bit in range(7, -1, -1):
        if found:
          if self.n565 & (2L ** bit):
            self.sim_file.write("1")
          else:
            self.sim_file.write("0")
        else:
          if self.n565 & (2L ** bit):
            self.sim_file.write("b1")
            found = 1
      if not found:
        self.sim_file.write("b0")
      self.sim_file.write(" '\n")
      self.sim_n565 = self.n565
    if self.sim_n566 != self.n566:
      if not changed:
        changed = 1
        self.sim_file.write("#%d\n" % self.sim_count)
      found = 0
      for bit in range(7, -1, -1):
        if found:
          if self.n566 & (2L ** bit):
            self.sim_file.write("1")
          else:
            self.sim_file.write("0")
        else:
          if self.n566 & (2L ** bit):
            self.sim_file.write("b1")
            found = 1
      if not found:
        self.sim_file.write("b0")
      self.sim_file.write(" (\n")
      self.sim_n566 = self.n566
    if self.sim_n567 != self.n567:
      if not changed:
        changed = 1
        self.sim_file.write("#%d\n" % self.sim_count)
      found = 0
      for bit in range(7, -1, -1):
        if found:
          if self.n567 & (2L ** bit):
            self.sim_file.write("1")
          else:
            self.sim_file.write("0")
        else:
          if self.n567 & (2L ** bit):
            self.sim_file.write("b1")
            found = 1
      if not found:
        self.sim_file.write("b0")
      self.sim_file.write(" )\n")
      self.sim_n567 = self.n567
    self.sim_count = self.sim_count + 1

